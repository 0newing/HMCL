import java.security.MessageDigest

def buildnumber = System.getenv("BUILD_NUMBER") ?: "SNAPSHOT"
def versionroot = System.getenv("VERSION_ROOT") ?: "3.1"
version = versionroot + '.' + buildnumber

dependencies {
    compile project(":HMCLCore")
    compile rootProject.files("lib/JFoenix.jar")
}

configurations {
    coreCompile.extendsFrom compile
    coreRuntime.extendsFrom runtime
}

jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes 'Created-By': 'Copyright(c) 2013-2018 huangyuhui.',
                   'Main-Class': 'org.jackhuang.hmcl.Main',
                   'Multi-Release': 'true',
                   'Implementation-Version': version
    }

    doLast {
        def messageDigest = MessageDigest.getInstance("SHA1")
        archivePath.eachByte 1024 * 1024, { byte[] buf, int bytesRead ->
            messageDigest.update(buf, 0, bytesRead)
        }
        def sha1Hex = new BigInteger(1, messageDigest.digest()).toString(16).padLeft(40, '0')
        def fileEx = new File(project.buildDir, "libs/" + archivePath.getName() + ".sha1")
        if (!fileEx.exists()) fileEx.createNewFile()
        fileEx.append sha1Hex
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        exclude 'icon.icns'
    }
}

task makeExecutable(dependsOn: jar) doLast {
    ext {
        jar.classifier = ''
        makeExecutableinjar = jar.archivePath
        jar.classifier = ''
        makeExecutableoutjar = jar.archivePath
        jar.classifier = ''
    }
    def loc = new File(project.buildDir, "libs/" + makeExecutableoutjar.getName().substring(0, makeExecutableoutjar.getName().length() - 4) + ".exe")
    def fos = new FileOutputStream(loc)
    def is = new FileInputStream(new File(project.projectDir, "src/main/resources/assets/HMCLauncher.exe"))
    int read
    def bytes = new byte[8192]
    while((read = is.read(bytes)) != -1)
        fos.write(bytes, 0, read)
    is.close()
    is = new FileInputStream(makeExecutableoutjar)
    while((read = is.read(bytes)) != -1)
        fos.write(bytes, 0, read)
    is.close()
    fos.close()

}

build.dependsOn makeExecutable
