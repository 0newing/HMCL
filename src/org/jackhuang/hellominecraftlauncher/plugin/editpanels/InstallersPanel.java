/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jackhuang.hellominecraftlauncher.plugin.editpanels;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.jackhuang.hellominecraftlauncher.JavaProcess;
import org.jackhuang.hellominecraftlauncher.apis.DoneListener;
import org.jackhuang.hellominecraftlauncher.apis.DownloadWindow;
import org.jackhuang.hellominecraftlauncher.apis.utils.MessageBox;
import org.jackhuang.hellominecraftlauncher.apis.utils.Utils;
import org.jackhuang.hellominecraftlauncher.download.URLGet;
import org.jackhuang.hellominecraftlauncher.installers.forge.BaseLauncherProfile;
import org.jackhuang.hellominecraftlauncher.installers.forge.ForgeFormatThread;
import org.jackhuang.hellominecraftlauncher.installers.forge.ForgeOldInstaller;
import org.jackhuang.hellominecraftlauncher.installers.forge.ForgeVersion;
import org.jackhuang.hellominecraftlauncher.installers.optifine.OptifineFormatDownloadThread;
import org.jackhuang.hellominecraftlauncher.installers.optifine.OptifineFormatThread;
import org.jackhuang.hellominecraftlauncher.installers.optifine.OptifineVersion;
import org.jackhuang.hellominecraftlauncher.plugin.HMCLPlugin;
import org.jackhuang.hellominecraftlauncher.utilities.C;
import org.jackhuang.hellominecraftlauncher.utilities.ProcessThread;
import org.jackhuang.hellominecraftlauncher.views.LogWindow;

/**
 *
 * @author hyh
 */
public class InstallersPanel extends javax.swing.JPanel {

    /**
     * Creates new form InstallersPanel
     */
    public InstallersPanel() {
        initComponents();
        
        setName(C.I18N.getString("Installers"));
        lstForge.setModel(Utils.makeDefaultTableModel(new String[]{C.I18N.getString("Type"), C.I18N.getString("Version"), C.I18N.getString("MCVersion"), C.I18N.getString("Time")},
                new Class[]{String.class, String.class, String.class, String.class}, new boolean[]{false,false,false,false}));
        lstOptifine.setModel(Utils.makeDefaultTableModel(new String[]{C.I18N.getString("Type"), C.I18N.getString("Version"), C.I18N.getString("MCVersion"), C.I18N.getString("Time")},
                new Class[]{String.class, String.class, String.class, String.class}, new boolean[]{false,false,false,false}));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel15 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        lstForge = new javax.swing.JTable();
        btnRefreshForge = new javax.swing.JButton();
        btnDownloadForge = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        txtForge = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        btnForgeChangeLog = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        lstOptifine = new javax.swing.JTable();
        btnRefreshOptifine = new javax.swing.JButton();
        btnDownloadOptifine = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        txtOptifine = new javax.swing.JTextArea();

        setName(""); // NOI18N

        lstForge.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "类型", "Forge版本", "Minecraft版本", "时间"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lstForge.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane11.setViewportView(lstForge);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jackhuang/hellominecraftlauncher/I18N"); // NOI18N
        btnRefreshForge.setText(bundle.getString("Refresh")); // NOI18N
        btnRefreshForge.setToolTipText(bundle.getString("Refresh")); // NOI18N
        btnRefreshForge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshForgeActionPerformed(evt);
            }
        });

        btnDownloadForge.setText(bundle.getString("Install")); // NOI18N
        btnDownloadForge.setToolTipText(bundle.getString("InstallForge")); // NOI18N
        btnDownloadForge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadForgeActionPerformed(evt);
            }
        });

        txtForge.setColumns(20);
        txtForge.setRows(5);
        jScrollPane12.setViewportView(txtForge);

        jLabel12.setText(bundle.getString("下载信息")); // NOI18N

        btnForgeChangeLog.setText(bundle.getString("Changelog")); // NOI18N
        btnForgeChangeLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForgeChangeLogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel12)
                    .addComponent(btnForgeChangeLog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                        .addComponent(btnRefreshForge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDownloadForge))
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRefreshForge)
                            .addComponent(btnDownloadForge))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnForgeChangeLog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane12))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane4.addTab("Forge", jPanel16);

        lstOptifine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "类型", "Optifine版本", "Minecraft版本", "时间"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lstOptifine.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane13.setViewportView(lstOptifine);

        btnRefreshOptifine.setText(bundle.getString("刷新")); // NOI18N
        btnRefreshOptifine.setToolTipText(bundle.getString("Refresh")); // NOI18N
        btnRefreshOptifine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshOptifineActionPerformed(evt);
            }
        });

        btnDownloadOptifine.setText(bundle.getString("安装")); // NOI18N
        btnDownloadOptifine.setToolTipText(bundle.getString("InstallOptifine")); // NOI18N
        btnDownloadOptifine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadOptifineActionPerformed(evt);
            }
        });

        jLabel20.setText(bundle.getString("下载信息")); // NOI18N

        txtOptifine.setColumns(20);
        txtOptifine.setRows(5);
        jScrollPane14.setViewportView(txtOptifine);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel20)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(btnRefreshOptifine)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDownloadOptifine)))
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRefreshOptifine)
                            .addComponent(btnDownloadOptifine))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane4.addTab("OptiFine", jPanel17);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane4)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane4)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 319, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshForgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshForgeActionPerformed
        refreshForgeVersions();
    }//GEN-LAST:event_btnRefreshForgeActionPerformed

    private void btnDownloadForgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadForgeActionPerformed
        int idx = lstForge.getSelectedRow();
        if (idx == -1) {
            return;
        }
        ForgeVersion v = forgeVersions.get(idx);
        String url;
        final String filepath = Utils.addSeparator(Utils.currentDir()) + "forge-installer.jar";
        if (v.installer[1] != null) {
            String info = "Downloading forge installer...(0/2)";
            txtForge.setText(info);
            txtForge.updateUI();
            DownloadWindow dw = new DownloadWindow();
            url = v.installer[1];
            dw.addDownloadURL("forge", url, filepath);
            dw.setVisible(true);
            if (!dw.isDownloadSuccessfully()) {
                String info4 = txtForge.getText();
                info4 += "\nFailed to download forge!!!";
                txtForge.setText(info4);
                txtForge.updateUI();
            } else {
                String info2 = txtForge.getText();
                info2 += "\n" + "Installing forge...(1/2)";
                txtForge.setText(info2);
                String msg = C.I18N.getString("ForgeInstall");
                MessageBox.Show(msg);
                Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
                Transferable t = new StringSelection(getGameDir());
                cb.setContents(t, null);
                String[] cmd = new String[]{
                    Utils.getJavaDir(), "-jar", filepath
                };
                BaseLauncherProfile.tryWriteProfile(getGameDir());
                try {
                    Process pro = Runtime.getRuntime().exec(cmd);
                    JavaProcess jp = new JavaProcess(Arrays.asList(cmd), pro);
                    ProcessThread thread = new ProcessThread(jp, new ProcessThread.ProcessListener() {
                        @Override
                        public void onStop() {
                            String info3 = txtForge.getText();
                            new File(filepath).delete();
                            info3 += "\n" + "Installed forge.(2/2)";
                            txtForge.setText(info3);
                            txtForge.updateUI();
                        }

                        @Override
                        public void onPrintln(String line) {
                            LogWindow.instance.log(line);
                        }
                    });
                    thread.start();
                } catch (IOException ex) {
                    Logger.getLogger(InstallersPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            DownloadWindow dw = new DownloadWindow();
            url = v.universal[1];
            dw.addDownloadURL("forge", url, filepath);
            dw.setVisible(true);
            if (!dw.isDownloadSuccessfully()) {
                String info4 = txtForge.getText();
                info4 += "\nFailed to download forge!!!";
                txtForge.setText(info4);
                txtForge.updateUI();
            } else {
                String info2 = txtForge.getText();
                info2 += "\n" + "Installing forge...(1/2)";
                txtForge.setText(info2);
                txtForge.updateUI();
                String minecraftjar = getGameDir();
                if (HMCLPlugin.env.getVersion().isVer16) {
                    minecraftjar += "versions" + File.separator + HMCLPlugin.env.getVersion().name + File.separator + HMCLPlugin.env.getVersion().name + ".jar";
                } else {
                    minecraftjar += "bin" + File.separator + "minecraft.jar";
                }
                ForgeOldInstaller.install(minecraftjar, minecraftjar, filepath);
                String info3 = txtForge.getText();
                new File(filepath).delete();
                info3 += "\n" + "Installed forge.(2/2)";
                txtForge.setText(info3);
                txtForge.updateUI();
            }
        }
    }//GEN-LAST:event_btnDownloadForgeActionPerformed

    private void btnForgeChangeLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForgeChangeLogActionPerformed
        final String changeLogUrl = forgeVersions.get(lstForge.getSelectedRow()).changelog;
        txtForge.setText(java.util.ResourceBundle.getBundle("org/jackhuang/hellominecraftlauncher/I18N").getString("获取中"));
        Thread t = new Thread() {
            @Override
            public void run() {
                txtForge.setText(URLGet.get(changeLogUrl));
            }
        };
        t.start();
    }//GEN-LAST:event_btnForgeChangeLogActionPerformed

    private void btnRefreshOptifineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshOptifineActionPerformed
        refreshOptifineVersions();
    }//GEN-LAST:event_btnRefreshOptifineActionPerformed

    private void btnDownloadOptifineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadOptifineActionPerformed
        int idx = lstOptifine.getSelectedRow();
        if (idx == -1) {
            return;
        }
        OptifineVersion v = optifineVersions.get(idx);
        String info = "Downloading optifine...(0/2)";
        final String filepath = Utils.addSeparator(Utils.currentDir()) + "optifine.jar";
        txtOptifine.setText(info);
        txtOptifine.updateUI();
        OptifineFormatDownloadThread thread;
        thread = new OptifineFormatDownloadThread(new DoneListener<String, Object>() {
            @Override
            public void onDone(String url, Object value2) {
                String info2 = txtOptifine.getText();
                info2 += "\nurl: " + url;
                info2 += "\nInstalling optifine...(1/2)";
                txtOptifine.setText(info2);
                txtOptifine.updateUI();
                DownloadWindow dw = new DownloadWindow();
                dw.addDownloadURL("optifine", url, filepath);
                dw.setVisible(true);
                if (dw.isDownloadSuccessfully()) {
                    String minecraftjar = getGameDir();
                    if (HMCLPlugin.env.getVersion().isVer16) {
                        minecraftjar += "versions" + File.separator + HMCLPlugin.env.getVersion().name + File.separator + HMCLPlugin.env.getVersion().name + ".jar";
                    } else {
                        minecraftjar += "bin" + File.separator + "minecraft.jar";
                    }
                    ForgeOldInstaller.install(minecraftjar, minecraftjar, filepath);
                    String info3 = txtOptifine.getText();
                    new File(filepath).delete();
                    info3 += "\n" + "Installed optifine.(2/2)";
                    txtOptifine.setText(info3);
                    txtOptifine.updateUI();
                } else {
                    String info4 = txtOptifine.getText();
                    info4 += "\nFailed to download optifine!!!";
                    txtOptifine.setText(info4);
                    txtOptifine.updateUI();
                }
            }
        }, v, HMCLPlugin.env.getSourceType());
        thread.start();
    }//GEN-LAST:event_btnDownloadOptifineActionPerformed

    public void useOptifineVersions() {
        if (showOptifineVersions == null) {
            return;
        }
        DefaultTableModel model = (DefaultTableModel) lstOptifine.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (OptifineVersion v : showOptifineVersions) {

            Object[] row = new Object[]{
                v.type, v.ver, v.mcver, v.date
            };
            model.addRow(row);
        }
        lstOptifine.updateUI();
    }

    public void refreshForgeVersions() {
        ForgeFormatThread thread = new ForgeFormatThread(
                new DoneListener<List<ForgeVersion>, Object>() {
            @Override
            public void onDone(List<ForgeVersion> value, Object value2) {
                forgeVersions = value;
                reloadForgeList();
            }
        }, HMCLPlugin.env.getSourceType());
        thread.start();
    }

    int getCharShowTime(String s, char c) {
        int res = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                res++;
            }
        }
        return res;
    }

    String formatVersion(String ver) {
        int i = (getCharShowTime(ver, '.'));
        if (i == 0) {
            if (getCharShowTime(ver, 'w') > 0) {
                return ver;
            } else {
                return ver + ".0.0";
            }
        } else if (i == 1) {
            return ver + ".0";
        } else {
            return ver;
        }
    }

    public void reloadOptifineList() {
        if (optifineVersions == null) {
            return;
        }
        String mcver = HMCLPlugin.env.getMinecraftVersion().version;
        if (mcver == null) {
            showOptifineVersions = optifineVersions;
            useOptifineVersions();
            return;
        }
        mcver = formatVersion(mcver);
        ArrayList<OptifineVersion> al = new ArrayList<OptifineVersion>();
        for (OptifineVersion v : optifineVersions) {
            if(v.mcver == null) continue;
            if (formatVersion(v.mcver).equals(mcver)) {
                al.add(v);
            }
        }
        if (al.size() > 0) {
            showOptifineVersions = al;
        }
        useOptifineVersions();
    }

    public void useForgeVersions() {
        if (showForgeVersions == null) {
            return;
        }
        DefaultTableModel model = (DefaultTableModel) lstForge.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (ForgeVersion v : showForgeVersions) {
            Object[] row = new Object[]{
                "forge", v.ver, v.mcver, v.releasetime
            };
            model.addRow(row);
        }
        lstForge.updateUI();
    }

    public void reloadForgeList() {
        if (forgeVersions == null) {
            return;
        }
        String mcver = HMCLPlugin.env.getMinecraftVersion().version;
        if (mcver == null) {
            showForgeVersions = forgeVersions;
            useForgeVersions();
            return;
        }
        mcver = formatVersion(mcver);
        ArrayList<ForgeVersion> al = new ArrayList<ForgeVersion>();
        for (ForgeVersion v : forgeVersions) {
            if(v.mcver == null) continue;
            if (formatVersion(v.mcver).equals(mcver)) {
                al.add(v);
            }
        }
        if (al.size() > 0) {
            showForgeVersions = al;
        }
        useForgeVersions();
    }

    void refreshOptifineVersions() {
        OptifineFormatThread thread = new OptifineFormatThread(
                new DoneListener<List<OptifineVersion>, Object>() {
            @Override
            public void onDone(List<OptifineVersion> value, Object value2) {
                optifineVersions = value;
                reloadOptifineList();
            }
        }, HMCLPlugin.env.getSourceType());
        thread.start();
    }

    private String getGameDir() {
        return Utils.getGameDir(HMCLPlugin.env.getVersion(), HMCLPlugin.env.getDefaultGameDir());
    }
    List<ForgeVersion> forgeVersions, showForgeVersions;
    List<OptifineVersion> optifineVersions, showOptifineVersions;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDownloadForge;
    private javax.swing.JButton btnDownloadOptifine;
    private javax.swing.JButton btnForgeChangeLog;
    private javax.swing.JButton btnRefreshForge;
    private javax.swing.JButton btnRefreshOptifine;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTable lstForge;
    private javax.swing.JTable lstOptifine;
    private javax.swing.JTextArea txtForge;
    private javax.swing.JTextArea txtOptifine;
    // End of variables declaration//GEN-END:variables
}
